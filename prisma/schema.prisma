generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sex {
  male
  female
  other
}

enum ApplicableSex {
  male
  female
  other
  unisex
  all
}

enum Role {
  customer
  merchant
  employee
  admin
}

enum Permission {
  canCreate
  canUpdate
  canDelete
}

enum RatingType {
  overall
  service
  cleanliness
  staffBehaviour
  valueForMoney
}

enum BannerActionType {
  salon
  webview
  other
}

enum DiscountType {
  flat
  percent
}

enum AddressType {
  residential
  commercial
}

enum ServiceType {
  standard
  additional
}

enum OptedServiceAvailability {
  available
  temporaryUnavailable
  unavailable
}

enum ServiceStyleType {
  trending
  retro
  modern
  indian
  western
}

enum OrderStatus {
  created
  fulfilling
  fulfilled
  rejected
}

enum PaymentStatus {
  pending
  paid
  refunded
  failed
}

enum AppointmentStatus {
  upcoming
  ongoing
  completed
  cancelled
  rejected
}

enum AccountType {
  savings
  current
}

enum EntityType {
  user
  salon
  employee
  service
  serviceCategory
  optedService
}

enum FileType {
  image
}

enum RestrictionType {
  only
  include
  exclude
}

enum EntityStatus {
  created
  verified
  disabled
  trashed
}

enum TimeSlotAvailability {
  available
  occupied
  temporaryUnavailable
  unavailable
}

enum SalonCategorizationCriteria {
  top
  popular
}

enum TransactionChannel {
  cash
  digitalWallet
  upi
  card
}

enum TransactionStatus {
  pending
  completed
  failed
}

model ServiceableCity {
  id    Int     @id @default(autoincrement())
  city  String
  state String?

  @@unique([city, state])
}

model File {
  id                Int               @id @default(autoincrement())
  name              String
  type              FileType
  title             String?
  mimeType          String?
  createdBy         User?             @relation("uploadedFiles", fields: [userId], references: [id])
  collections       FilesCollection[]
  salons            Salon[]
  services          Service[]
  serviceCategories ServiceCategory[]
  users             User[]            @relation("profileImage")
  servicePackages   ServicePackage[]
  banners           Banner[]
  updatedAt         DateTime          @updatedAt
  userId            Int?
}

model FilesCollection {
  id          Int      @id @default(autoincrement())
  title       String?
  description String?
  items       File[]
  salons      Salon[]
  reviews     Review[]
  updatedAt   DateTime @updatedAt
}

model User {
  id                Int          @id @default(autoincrement())
  firstName         String
  lastName          String?
  gender            Sex
  mobile            String
  password          String?
  email             String?
  role              Role         @default(customer)
  profileImage      File?        @relation("profileImage", fields: [profileImageId], references: [id], onDelete: SetNull)
  profileImageId    Int?
  loginOTP          String?
  loginOTPExpiresAt DateTime?
  customer          Customer?
  merchant          Merchant?
  employee          Employee?
  uploadedFiles     File[]       @relation("uploadedFiles")
  status            EntityStatus @default(created)
  updatedAt         DateTime     @updatedAt

  @@unique([mobile, role])
}

model Customer {
  id               Int           @id @default(autoincrement())
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int           @unique
  ratings          Rating[]
  appointments     Appointment[]
  restrictions     Restriction[]
  wishListedSalons Salon[]
}

model Merchant {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique
  aadhar String? @unique
  salons Salon[]
}

model Employee {
  id               Int                 @id @default(autoincrement())
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int                 @unique
  salon            Salon               @relation(fields: [salonId], references: [id], onDelete: Cascade)
  salonId          Int
  designation      EmployeeDesignation @relation(fields: [designationId], references: [id])
  designationId    Int
  experienceYears  Int?
  timeSlots        TimeSlot[]
  optedServices    OptedService[]
  appointmentSlots AppointmentSlot[]
  restrictions     Restriction[]
  updatedAt        DateTime            @updatedAt
}

model EmployeeDesignation {
  id            Int           @id @default(autoincrement())
  title         String
  description   String?
  applicableSex ApplicableSex
  employees     Employee[]

  @@unique([title, applicableSex])
}

model Service {
  id                     Int                @id @default(autoincrement())
  name                   String
  type                   ServiceType        @default(standard)
  description            String?
  applicableSex          ApplicableSex
  defaultPrice           Decimal?           @db.Decimal(10, 2)
  defaultDurationSeconds Int?
  image                  File?              @relation(fields: [imageId], references: [id])
  imageId                Int?
  styles                 ServiceStyleType[]
  categories             ServiceCategory[]
  restrictions           Restriction[]
  optedServices          OptedService[]
  updatedAt              DateTime           @updatedAt
}

model OptedService {
  id                Int                      @id @default(autoincrement())
  salon             Salon                    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  salonId           Int
  service           Service                  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId         Int
  price             Decimal                  @db.Decimal(10, 2)
  durationSeconds   Int
  availability      OptedServiceAvailability @default(available)
  providerEmployees Employee[]
  packages          ServicePackage[]
  appointmentSlots  AppointmentSlot[]

  @@unique([salonId, serviceId])
}

model ServicePackage {
  id              Int            @id @default(autoincrement())
  name            String
  description     String
  image           File?          @relation(fields: [imageId], references: [id], onDelete: SetNull)
  imageId         Int?
  price           Decimal        @db.Decimal(10, 2)
  durationSeconds Int
  optedServices   OptedService[]
  updatedAt       DateTime       @updatedAt
}

model ServiceCategory {
  id             Int               @id @default(autoincrement())
  name           String
  image          File?             @relation(fields: [imageId], references: [id], onDelete: SetNull)
  imageId        Int?
  bgColor        String
  applicableSex  ApplicableSex
  parent         ServiceCategory?  @relation("serviceCategoryParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  parentId       Int?
  children       ServiceCategory[] @relation("serviceCategoryParentChildren")
  providerSalons Salon[]
  services       Service[]
  restrictions   Restriction[]
  updatedAt      DateTime          @updatedAt
}

model BankAccount {
  id                Int          @id @default(autoincrement())
  accountNumber     String
  accountHolderName String?
  type              AccountType?
  bankName          String
  branchName        String
  ifsc              String
  salon             Salon?
}

model Address {
  id          Int         @id @default(autoincrement())
  name        String?
  type        AddressType @default(commercial)
  line1       String
  line2       String?
  city        String
  state       String?
  countryCode String      @default("IN")
  postCode    String?
  latitude    Decimal?    @db.Decimal(10, 8)
  longitude   Decimal?    @db.Decimal(11, 8)
  phone       String?
  salon       Salon?
  orders      Order[]
}

model Salon {
  id                    Int               @id @default(autoincrement())
  name                  String
  about                 String
  openHours             String
  applicableSex         ApplicableSex
  coverImage            File?             @relation(fields: [coverImageId], references: [id], onDelete: SetNull)
  coverImageId          Int?
  imageGallery          FilesCollection?  @relation(fields: [imageGalleryId], references: [id], onDelete: SetNull)
  imageGalleryId        Int?
  website               String?
  address               Address?          @relation(fields: [addressId], references: [id], onDelete: SetNull)
  addressId             Int?              @unique
  pan                   String?
  gst                   String?
  bankAccount           BankAccount?      @relation(fields: [bankAccountId], references: [id], onDelete: SetNull)
  bankAccountId         Int?              @unique
  serviceCategories     ServiceCategory[]
  optedServices         OptedService[]
  appointments          Appointment[]
  owner                 Merchant          @relation(fields: [ownerId], references: [id])
  ownerId               Int
  employees             Employee[]
  wishListedByCustomers Customer[]
  restrictions          Restriction[]
  salonCategories       SalonCategory[]
  status                EntityStatus      @default(created)
  updatedAt             DateTime          @updatedAt
}

model SalonCategory {
  id       Int                         @id @default(autoincrement())
  salon    Salon                       @relation(fields: [salonId], references: [id], onDelete: Cascade)
  salonId  Int
  criteria SalonCategorizationCriteria

  @@unique([salonId, criteria])
}

model TimeSlot {
  id           Int                  @id @default(autoincrement())
  start        DateTime             @db.Time()
  end          DateTime             @db.Time()
  availability TimeSlotAvailability
  employee     Employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId   Int
  note         String?
  updatedAt    DateTime             @updatedAt
}

model Appointment {
  id               Int               @id @default(autoincrement())
  appointmentId    String            @unique
  customer         Customer?         @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId       Int?
  salon            Salon?            @relation(fields: [salonId], references: [id], onDelete: SetNull)
  salonId          Int?
  startsAt         DateTime
  endsAt           DateTime?
  otp              String?
  appointmentSlots AppointmentSlot[]
  order            Order?
  status           AppointmentStatus @default(upcoming)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model AppointmentSlot {
  id             Int           @id @default(autoincrement())
  appointment    Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId  Int
  optedService   OptedService? @relation(fields: [optedServiceId], references: [id], onDelete: SetNull)
  optedServiceId Int?
  employee       Employee?     @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  employeeId     Int?
  startsAt       DateTime?
  endsAt         DateTime?
  note           String?
  orderItem      OrderItem?
}

model Order {
  id               Int           @id @default(autoincrement())
  type             String?
  appointment      Appointment?  @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  appointmentId    Int?          @unique
  items            OrderItem[]
  total            Decimal       @db.Decimal(12, 2)
  tax              Decimal?      @db.Decimal(10, 2)
  discount         Decimal?      @db.Decimal(10, 2)
  billingAddress   Address?      @relation(fields: [billingAddressId], references: [id], onDelete: SetNull)
  billingAddressId Int?
  note             String?
  paymentStatus    PaymentStatus @default(pending)
  status           OrderStatus   @default(created)
  transactions     Transaction[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model OrderItem {
  id                Int              @id @default(autoincrement())
  order             Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId           Int
  appointmentSlot   AppointmentSlot? @relation(fields: [appointmentSlotId], references: [id], onDelete: SetNull)
  appointmentSlotId Int?             @unique
  price             Decimal          @db.Decimal(10, 2)
  quantity          Int              @default(1)
  note              String?
  ratings           Rating[]
  updatedAt         DateTime         @updatedAt
}

model Transaction {
  id            Int                @id @default(autoincrement())
  transactionId String?
  channel       TransactionChannel
  amount        Decimal            @db.Decimal(10, 2)
  order         Order?             @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId       Int?
  isReverse     Boolean            @default(false)
  note          String?
  status        TransactionStatus  @default(pending)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Rating {
  id          Int          @id @default(autoincrement())
  type        RatingType
  starCount   Int
  parent      Rating?      @relation("ratingParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    Int?
  children    Rating[]     @relation("ratingParentChildren")
  review      Review?      @relation(fields: [reviewId], references: [id], onDelete: SetNull)
  reviewId    Int?         @unique
  customer    Customer?    @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId  Int?
  orderItem   OrderItem?   @relation(fields: [orderItemId], references: [id], onDelete: SetNull)
  orderItemId Int?
  status      EntityStatus @default(created)
  updatedAt   DateTime     @updatedAt

  @@unique([type, orderItemId])
}

model Review {
  id        Int              @id @default(autoincrement())
  title     String?
  comment   String
  rating    Rating?
  gallery   FilesCollection? @relation(fields: [galleryId], references: [id], onDelete: SetNull)
  galleryId Int?
  updatedAt DateTime         @updatedAt
}

model Banner {
  id            Int              @id @default(autoincrement())
  image         File             @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId       Int
  applicableSex ApplicableSex
  actionType    BannerActionType
  resourceId    Int?
  resourceURI   String?
}

model Coupon {
  id                Int           @id @default(autoincrement())
  code              String
  description       String?
  discountType      DiscountType
  amount            Decimal       @db.Decimal(10, 2)
  minPurchaseAmount Decimal?      @db.Decimal(10, 2)
  maxPurchaseAmount Decimal?      @db.Decimal(10, 2)
  individualUse     Boolean       @default(false)
  usageLimit        Int?
  usageCount        Int           @default(0)
  restrictions      Restriction[]
  expiresAt         DateTime?
  status            EntityStatus  @default(created)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Restriction {
  id         Int              @id @default(autoincrement())
  type       RestrictionType
  customer   Customer?        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int?
  salon      Salon?           @relation(fields: [salonId], references: [id], onDelete: Cascade)
  salonId    Int?
  employee   Employee?        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId Int?
  service    Service?         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId  Int?
  category   ServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int?
  coupon     Coupon?          @relation(fields: [couponId], references: [id], onDelete: Cascade)
  couponId   Int?
}
